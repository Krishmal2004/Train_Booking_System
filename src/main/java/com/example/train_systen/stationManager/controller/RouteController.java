package com.example.train_systen.stationManager.controller;

import com.example.train_systen.stationManager.model.Route;
import com.example.train_systen.stationManager.service.RouteService;
import jakarta.servlet.http.HttpSession;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.util.List;

@Controller
@RequestMapping("/routes")
public class RouteController {

    private final RouteService routeService;

    @Autowired
    public RouteController(RouteService routeService) {
        this.routeService = routeService;
    }
    private void addCommonAttributes(Model model, HttpSession session) {
        model.addAttribute("username",session.getAttribute("username"));
    }

    @GetMapping
    public String listRoutes(Model model,
                             @RequestParam(required = false) String status,
                             @RequestParam(required = false) String location,
                             HttpSession session) {

        if (session.getAttribute("user") == null) {
            return "redirect:/login";
        }
        List<Route> routes;

        if (status != null && !status.isEmpty()) {
            routes = routeService.getRoutesByStatus(status);
        } else if (location != null && !location.isEmpty()) {
            routes = routeService.searchRoutesByLocation(location);
        } else {
            routes = routeService.getAllRoutes();
        }

        model.addAttribute("routes", routes);
        addCommonAttributes(model, session);
        return "stationManager/route/list";
    }

    @GetMapping("/create")
    public String showCreateForm(Model model, HttpSession session) {
        if(session.getAttribute("user") == null) {
            return "redirect:/login";
        }
        model.addAttribute("route", new Route());
        model.addAttribute("isAutoGeneratedId", true); // Add flag to indicate auto-generation
        addCommonAttributes(model, session);
        return "stationManager/route/create";
    }

    @PostMapping("/create")
    public String createRoute(@Valid @ModelAttribute("route") Route route,
                              BindingResult result,
                              RedirectAttributes redirectAttributes,
                              Model model,
                              HttpSession session) {
        if (session.getAttribute("user") == null) {
            return "redirect:/login";
        }

        // Remove validation for routeId since it will be auto-generated
        // The routeId check is no longer needed here

        if (result.hasErrors()) {
            model.addAttribute("isAutoGeneratedId", true); // Maintain flag on validation error
            addCommonAttributes(model, session);
            return "stationManager/route/create";
        }

        // Set routeId to null to ensure auto-generation
        route.setRouteId(null);

        routeService.saveRoute(route);
        redirectAttributes.addFlashAttribute("successMessage", "Route created successfully with auto-generated ID");
        return "redirect:/routes";
    }

    @GetMapping("/{id}")
    public String viewRoute(@PathVariable Long id, Model model,HttpSession session) {
        if(session.getAttribute("user") == null) {
            return "redirect:/login";
        }
        Route route = routeService.getRouteById(id)
                .orElseThrow(() -> new IllegalArgumentException("Invalid route ID: " + id));
        model.addAttribute("route", route);
        addCommonAttributes(model, session);
        return "stationManager/route/view";
    }

    @GetMapping("/{id}/edit")
    public String showEditForm(@PathVariable Long id, Model model,HttpSession session) {
        if(session.getAttribute("user") == null) {
            return "redirect:/login";
        }
        Route route = routeService.getRouteById(id)
                .orElseThrow(() -> new IllegalArgumentException("Invalid route ID: " + id));
        model.addAttribute("route", route);
        model.addAttribute("isAutoGeneratedId", false); // Existing routes already have IDs
        addCommonAttributes(model, session);
        return "stationManager/route/edit";
    }

    @PostMapping("/{id}/edit")
    public String updateRoute(@PathVariable Long id,
                              @Valid @ModelAttribute("route") Route route,
                              BindingResult result,
                              RedirectAttributes redirectAttributes,
                              HttpSession session) {
        if (session.getAttribute("user") == null) {
            return "redirect:/login";
        }
        Route existingRoute = routeService.getRouteById(id)
                .orElseThrow(() -> new IllegalArgumentException("Invalid route ID: " + id));

        // Keep routeId validation for updates, but only if it's being changed
        if (!existingRoute.getRouteId().equals(route.getRouteId()) &&
                routeService.isRouteIdExists(route.getRouteId())) {
            result.rejectValue("routeId", "error.route", "Route ID already exists");
        }

        if (result.hasErrors()) {
            return "stationManager/route/edit";
        }

        route.setId(id);
        routeService.saveRoute(route);
        redirectAttributes.addFlashAttribute("successMessage", "Route updated successfully");
        return "redirect:/routes";
    }

    @GetMapping("/{id}/delete")
    public String deleteRoute(@PathVariable Long id, RedirectAttributes redirectAttributes,HttpSession session) {
        if (session.getAttribute("user") == null) {
            return "redirect:/login";
        }
        routeService.deleteRoute(id);
        redirectAttributes.addFlashAttribute("successMessage", "Route deleted successfully");
        return "redirect:/routes";
    }
}